/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Stage } from "./Stage";
import { StageCountArgs } from "./StageCountArgs";
import { StageFindManyArgs } from "./StageFindManyArgs";
import { StageFindUniqueArgs } from "./StageFindUniqueArgs";
import { CreateStageArgs } from "./CreateStageArgs";
import { UpdateStageArgs } from "./UpdateStageArgs";
import { DeleteStageArgs } from "./DeleteStageArgs";
import { SectionFindManyArgs } from "../../section/base/SectionFindManyArgs";
import { Section } from "../../section/base/Section";
import { StageService } from "../stage.service";
@graphql.Resolver(() => Stage)
export class StageResolverBase {
  constructor(protected readonly service: StageService) {}

  async _stagesMeta(
    @graphql.Args() args: StageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Stage])
  async stages(@graphql.Args() args: StageFindManyArgs): Promise<Stage[]> {
    return this.service.stages(args);
  }

  @graphql.Query(() => Stage, { nullable: true })
  async stage(
    @graphql.Args() args: StageFindUniqueArgs
  ): Promise<Stage | null> {
    const result = await this.service.stage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Stage)
  async createStage(@graphql.Args() args: CreateStageArgs): Promise<Stage> {
    return await this.service.createStage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Stage)
  async updateStage(
    @graphql.Args() args: UpdateStageArgs
  ): Promise<Stage | null> {
    try {
      return await this.service.updateStage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Stage)
  async deleteStage(
    @graphql.Args() args: DeleteStageArgs
  ): Promise<Stage | null> {
    try {
      return await this.service.deleteStage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Section], { name: "sections" })
  async findSections(
    @graphql.Parent() parent: Stage,
    @graphql.Args() args: SectionFindManyArgs
  ): Promise<Section[]> {
    const results = await this.service.findSections(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
