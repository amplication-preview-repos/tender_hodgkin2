/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BonusService } from "../bonus.service";
import { BonusCreateInput } from "./BonusCreateInput";
import { Bonus } from "./Bonus";
import { BonusFindManyArgs } from "./BonusFindManyArgs";
import { BonusWhereUniqueInput } from "./BonusWhereUniqueInput";
import { BonusUpdateInput } from "./BonusUpdateInput";

export class BonusControllerBase {
  constructor(protected readonly service: BonusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bonus })
  async createBonus(@common.Body() data: BonusCreateInput): Promise<Bonus> {
    return await this.service.createBonus({
      data: data,
      select: {
        createdAt: true,
        id: true,
        points: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bonus] })
  @ApiNestedQuery(BonusFindManyArgs)
  async bonuses(@common.Req() request: Request): Promise<Bonus[]> {
    const args = plainToClass(BonusFindManyArgs, request.query);
    return this.service.bonuses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        points: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bonus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bonus(
    @common.Param() params: BonusWhereUniqueInput
  ): Promise<Bonus | null> {
    const result = await this.service.bonus({
      where: params,
      select: {
        createdAt: true,
        id: true,
        points: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bonus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBonus(
    @common.Param() params: BonusWhereUniqueInput,
    @common.Body() data: BonusUpdateInput
  ): Promise<Bonus | null> {
    try {
      return await this.service.updateBonus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          points: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bonus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBonus(
    @common.Param() params: BonusWhereUniqueInput
  ): Promise<Bonus | null> {
    try {
      return await this.service.deleteBonus({
        where: params,
        select: {
          createdAt: true,
          id: true,
          points: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
