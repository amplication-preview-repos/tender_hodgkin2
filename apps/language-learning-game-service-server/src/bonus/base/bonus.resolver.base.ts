/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bonus } from "./Bonus";
import { BonusCountArgs } from "./BonusCountArgs";
import { BonusFindManyArgs } from "./BonusFindManyArgs";
import { BonusFindUniqueArgs } from "./BonusFindUniqueArgs";
import { CreateBonusArgs } from "./CreateBonusArgs";
import { UpdateBonusArgs } from "./UpdateBonusArgs";
import { DeleteBonusArgs } from "./DeleteBonusArgs";
import { BonusService } from "../bonus.service";
@graphql.Resolver(() => Bonus)
export class BonusResolverBase {
  constructor(protected readonly service: BonusService) {}

  async _bonusesMeta(
    @graphql.Args() args: BonusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bonus])
  async bonuses(@graphql.Args() args: BonusFindManyArgs): Promise<Bonus[]> {
    return this.service.bonuses(args);
  }

  @graphql.Query(() => Bonus, { nullable: true })
  async bonus(
    @graphql.Args() args: BonusFindUniqueArgs
  ): Promise<Bonus | null> {
    const result = await this.service.bonus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bonus)
  async createBonus(@graphql.Args() args: CreateBonusArgs): Promise<Bonus> {
    return await this.service.createBonus({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bonus)
  async updateBonus(
    @graphql.Args() args: UpdateBonusArgs
  ): Promise<Bonus | null> {
    try {
      return await this.service.updateBonus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bonus)
  async deleteBonus(
    @graphql.Args() args: DeleteBonusArgs
  ): Promise<Bonus | null> {
    try {
      return await this.service.deleteBonus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
